<?php

namespace App\Filament\Resources\Users\Tables;

use Filament\Actions\BulkActionGroup;
use Filament\Actions\DeleteBulkAction;
use Filament\Actions\EditAction;
use Filament\Actions\ViewAction;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\ImageColumn;
use Filament\Tables\Table;
use Illuminate\Support\Facades\Gate;

class UsersTable {
    public static function configure(Table $table): Table {
        return $table
            ->columns([
                ImageColumn::make('avatar')
                    ->label('·∫¢nh')
                    ->circular()
                    ->size(40),
                TextColumn::make('name')
                    ->label('H·ªç v√† t√™n')
                    ->searchable(),
                TextColumn::make('contact')
                    ->label('Li√™n h·ªá')
                    ->state(fn($record) => $record)
                    ->formatStateUsing(function ($record) {
                        $phone = $record->phone ?? '';
                        $email = $record->email ?? '';
                        $lines = [];
                        if ($phone) {
                            $lines[] = 'üìû ' . e($phone);
                        }
                        if ($email) {
                            $lines[] = '‚úâÔ∏è ' . e($email);
                        }
                        return implode('<br>', $lines) ?: '‚Äî';
                    })
                    ->html()
                    ->searchable(query: function ($query, $search) {
                        return $query->where(function ($q) use ($search) {
                            $q->orWhere('email', 'like', "%$search%")
                                ->orWhere('phone', 'like', "%$search%");
                        });
                    }),
                TextColumn::make('email_verified_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                TextColumn::make('role')
                    ->label('Vai tr√≤')
                    ->formatStateUsing(function ($state) {
                        return match ($state) {
                            'super_admin' => 'Super Admin',
                            'organization_owner' => 'Ch·ªß ƒë∆°n v·ªã',
                            'ctv' => 'C·ªông t√°c vi√™n',
                            default => $state
                        };
                    })
                    ->badge()
                    ->color(function ($state) {
                        return match ($state) {
                            'super_admin' => 'danger',
                            'organization_owner' => 'warning',
                            'ctv' => 'info',
                            default => 'gray'
                        };
                    })
                    ->searchable(),
                TextColumn::make('organization')
                    ->label('T·ªï ch·ª©c')
                    ->state(function ($record) {
                        // L·∫•y t·ªï ch·ª©c t·ª´ quan h·ªá (owner -> ownedOrganization, ctv -> collaborator.organization)
                        $org = $record->getOrganization();
                        return $org?->name ?? '‚Äî';
                    })
                    ->sortable()
                    ->searchable(query: function ($query, $search) {
                        // T√¨m theo t√™n t·ªï ch·ª©c b·∫±ng c√°ch join linh ho·∫°t
                        return $query->where(function ($q) use ($search) {
                            // T√¨m theo email CTV -> join sang collaborators -> organizations
                            $q->orWhereIn('email', \App\Models\Collaborator::whereHas('organization', function ($oq) use ($search) {
                                $oq->where('name', 'like', "%$search%");
                            })->pluck('email'))
                                // T√¨m theo owner -> organizations.organization_owner_id
                                ->orWhereIn('id', \App\Models\Organization::where('name', 'like', "%$search%")->pluck('organization_owner_id'));
                        });
                    })
                    ->toggleable(isToggledHiddenByDefault: false)
                    ->visible(fn() => \Illuminate\Support\Facades\Auth::user()?->role === 'super_admin'),
                TextColumn::make('created_at')
                    ->label('Ng√†y t·∫°o')
                    ->dateTime('d/m/Y H:i:s')
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                TextColumn::make('updated_at')
                    ->label('Ng√†y c·∫≠p nh·∫≠t')
                    ->dateTime('d/m/Y H:i:s')
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                //
            ])
            ->recordActions([
                ViewAction::make()
                    ->label('Xem chi ti·∫øt'),
                EditAction::make()
                    ->label('Ch·ªânh s·ª≠a')
                    ->visible(fn($record) => Gate::allows('update', $record)),
            ])
            ->toolbarActions([
                BulkActionGroup::make([
                    DeleteBulkAction::make()
                        ->label('X√≥a ƒë√£ ch·ªçn')
                        ->modalHeading('X√≥a ng∆∞·ªùi d√πng ƒë√£ ch·ªçn')
                        ->modalDescription('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√°c ng∆∞·ªùi d√πng ƒë√£ ch·ªçn? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.')
                        ->modalSubmitActionLabel('X√≥a')
                        ->modalCancelActionLabel('H·ªßy')
                        ->visible(fn() => Gate::allows('viewAny', \App\Models\User::class))
                        ->before(function ($records) {
                            // Ki·ªÉm tra quy·ªÅn cho t·ª´ng record
                            foreach ($records as $record) {
                                if (!Gate::allows('delete', $record)) {
                                    throw new \Exception('B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ng∆∞·ªùi d√πng n√†y.');
                                }
                            }
                        }),
                ]),
            ]);
    }
}
